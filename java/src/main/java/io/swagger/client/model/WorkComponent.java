/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * WorkComponent
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-12T15:49:33.774Z[GMT]")
public class WorkComponent {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TEXT("TEXT"),
    AUDIO("AUDIO"),
    VIDEO("VIDEO");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("langcode")
  private String langcode = null;

  @SerializedName("scriptcode")
  private String scriptcode = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("hyperlink")
  private String hyperlink = null;

  public WorkComponent type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public WorkComponent langcode(String langcode) {
    this.langcode = langcode;
    return this;
  }

   /**
   * Get langcode
   * @return langcode
  **/
  @Schema(description = "")
  public String getLangcode() {
    return langcode;
  }

  public void setLangcode(String langcode) {
    this.langcode = langcode;
  }

  public WorkComponent scriptcode(String scriptcode) {
    this.scriptcode = scriptcode;
    return this;
  }

   /**
   * Get scriptcode
   * @return scriptcode
  **/
  @Schema(description = "")
  public String getScriptcode() {
    return scriptcode;
  }

  public void setScriptcode(String scriptcode) {
    this.scriptcode = scriptcode;
  }

  public WorkComponent body(String body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @Schema(description = "")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public WorkComponent hyperlink(String hyperlink) {
    this.hyperlink = hyperlink;
    return this;
  }

   /**
   * Get hyperlink
   * @return hyperlink
  **/
  @Schema(description = "")
  public String getHyperlink() {
    return hyperlink;
  }

  public void setHyperlink(String hyperlink) {
    this.hyperlink = hyperlink;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkComponent workComponent = (WorkComponent) o;
    return Objects.equals(this.type, workComponent.type) &&
        Objects.equals(this.langcode, workComponent.langcode) &&
        Objects.equals(this.scriptcode, workComponent.scriptcode) &&
        Objects.equals(this.body, workComponent.body) &&
        Objects.equals(this.hyperlink, workComponent.hyperlink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, langcode, scriptcode, body, hyperlink);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkComponent {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    langcode: ").append(toIndentedString(langcode)).append("\n");
    sb.append("    scriptcode: ").append(toIndentedString(scriptcode)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    hyperlink: ").append(toIndentedString(hyperlink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
