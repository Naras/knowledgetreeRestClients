/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BuildProperties;
import io.swagger.client.model.LinkRequest;
import io.swagger.client.model.PersonResource;
import io.swagger.client.model.SubjectResource;
import io.swagger.client.model.WorkResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LinkControllerApi
 */
@Ignore
public class LinkControllerApiTest {

    private final LinkControllerApi api = new LinkControllerApi();

    /**
     * get root person
     *
     * get the root node for person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonRoot1Test() throws ApiException {
        PersonResource response = api.getPersonRoot1();

        // TODO: test validations
    }
    /**
     * get root subject
     *
     * get the root node for person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubjectRoot1Test() throws ApiException {
        SubjectResource response = api.getSubjectRoot1();

        // TODO: test validations
    }
    /**
     * get root work
     *
     * get the root node for person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkRoot1Test() throws ApiException {
        WorkResource response = api.getWorkRoot1();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void healthcheck2Test() throws ApiException {
        BuildProperties response = api.healthcheck2();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void persontopersonlinkTest() throws ApiException {
        LinkRequest body = null;
        String linktype = null;
        PersonResource response = api.persontopersonlink(body, linktype);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void persontoworklinkTest() throws ApiException {
        LinkRequest body = null;
        String linktype = null;
        PersonResource response = api.persontoworklink(body, linktype);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void persontoworklink1Test() throws ApiException {
        LinkRequest body = null;
        String linktype = null;
        SubjectResource response = api.persontoworklink1(body, linktype);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removepersontopersonlinkTest() throws ApiException {
        LinkRequest body = null;
        PersonResource response = api.removepersontopersonlink(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removepersontoworklinkTest() throws ApiException {
        LinkRequest body = null;
        PersonResource response = api.removepersontoworklink(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removesubjecttopersonlinkTest() throws ApiException {
        LinkRequest body = null;
        SubjectResource response = api.removesubjecttopersonlink(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removesubjecttosubjectlinkTest() throws ApiException {
        LinkRequest body = null;
        SubjectResource response = api.removesubjecttosubjectlink(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeworktoworklinkTest() throws ApiException {
        LinkRequest body = null;
        WorkResource response = api.removeworktoworklink(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subjecttosubjectlinkTest() throws ApiException {
        LinkRequest body = null;
        String linktype = null;
        SubjectResource response = api.subjecttosubjectlink(body, linktype);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subjecttosubjectlink1Test() throws ApiException {
        LinkRequest body = null;
        String linktype = null;
        WorkResource response = api.subjecttosubjectlink1(body, linktype);

        // TODO: test validations
    }
}
