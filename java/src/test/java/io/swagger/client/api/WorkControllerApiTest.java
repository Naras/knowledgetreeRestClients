/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BuildProperties;
import io.swagger.client.model.PersonResource;
import io.swagger.client.model.SubjectResource;
import io.swagger.client.model.WorkRequest;
import io.swagger.client.model.WorkResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkControllerApi
 */
@Ignore
public class WorkControllerApiTest {

    private final WorkControllerApi api = new WorkControllerApi();

    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addwork2Test() throws ApiException {
        WorkRequest body = null;
        String id = null;
        WorkResource response = api.addwork2(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addwork3Test() throws ApiException {
        WorkRequest body = null;
        String relation = null;
        String parentid = null;
        WorkResource response = api.addwork3(body, relation, parentid);

        // TODO: test validations
    }
    /**
     * get root person
     *
     * get the root node for person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPersonRoot4Test() throws ApiException {
        PersonResource response = api.getPersonRoot4();

        // TODO: test validations
    }
    /**
     * get root subject
     *
     * get the root node for person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubjectRoot4Test() throws ApiException {
        SubjectResource response = api.getSubjectRoot4();

        // TODO: test validations
    }
    /**
     * get root work
     *
     * get the root node for person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWorkRoot4Test() throws ApiException {
        WorkResource response = api.getWorkRoot4();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getworkbyidTest() throws ApiException {
        String id = null;
        WorkResource response = api.getworkbyid(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getworkbymysqlidTest() throws ApiException {
        String id = null;
        WorkResource response = api.getworkbymysqlid(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void healthcheck5Test() throws ApiException {
        BuildProperties response = api.healthcheck5();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removefromlist1Test() throws ApiException {
        String id = null;
        Boolean deletesubtree = null;
        String response = api.removefromlist1(id, deletesubtree);

        // TODO: test validations
    }
}
