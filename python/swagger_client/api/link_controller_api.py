# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LinkControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_person_root1(self, **kwargs):  # noqa: E501
        """get root person  # noqa: E501

        get the root node for person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_person_root1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_person_root1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_person_root1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_person_root1_with_http_info(self, **kwargs):  # noqa: E501
        """get root person  # noqa: E501

        get the root node for person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_person_root1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_person_root1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/rootperson', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subject_root1(self, **kwargs):  # noqa: E501
        """get root subject  # noqa: E501

        get the root node for person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subject_root1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subject_root1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_subject_root1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_subject_root1_with_http_info(self, **kwargs):  # noqa: E501
        """get root subject  # noqa: E501

        get the root node for person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subject_root1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subject_root1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/rootsubject', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubjectResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_work_root1(self, **kwargs):  # noqa: E501
        """get root work  # noqa: E501

        get the root node for person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_root1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WorkResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_work_root1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_work_root1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_work_root1_with_http_info(self, **kwargs):  # noqa: E501
        """get root work  # noqa: E501

        get the root node for person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_root1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: WorkResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_root1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/rootwork', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def healthcheck2(self, **kwargs):  # noqa: E501
        """healthcheck2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.healthcheck2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BuildProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.healthcheck2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.healthcheck2_with_http_info(**kwargs)  # noqa: E501
            return data

    def healthcheck2_with_http_info(self, **kwargs):  # noqa: E501
        """healthcheck2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.healthcheck2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BuildProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method healthcheck2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def persontopersonlink(self, body, linktype, **kwargs):  # noqa: E501
        """persontopersonlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.persontopersonlink(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.persontopersonlink_with_http_info(body, linktype, **kwargs)  # noqa: E501
        else:
            (data) = self.persontopersonlink_with_http_info(body, linktype, **kwargs)  # noqa: E501
            return data

    def persontopersonlink_with_http_info(self, body, linktype, **kwargs):  # noqa: E501
        """persontopersonlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.persontopersonlink_with_http_info(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'linktype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persontopersonlink" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `persontopersonlink`")  # noqa: E501
        # verify the required parameter 'linktype' is set
        if ('linktype' not in params or
                params['linktype'] is None):
            raise ValueError("Missing the required parameter `linktype` when calling `persontopersonlink`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'linktype' in params:
            header_params['linktype'] = params['linktype']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/persontoperson/addlink', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def persontoworklink(self, body, linktype, **kwargs):  # noqa: E501
        """persontoworklink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.persontoworklink(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.persontoworklink_with_http_info(body, linktype, **kwargs)  # noqa: E501
        else:
            (data) = self.persontoworklink_with_http_info(body, linktype, **kwargs)  # noqa: E501
            return data

    def persontoworklink_with_http_info(self, body, linktype, **kwargs):  # noqa: E501
        """persontoworklink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.persontoworklink_with_http_info(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'linktype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persontoworklink" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `persontoworklink`")  # noqa: E501
        # verify the required parameter 'linktype' is set
        if ('linktype' not in params or
                params['linktype'] is None):
            raise ValueError("Missing the required parameter `linktype` when calling `persontoworklink`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'linktype' in params:
            header_params['linktype'] = params['linktype']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/persontowork/addlink', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def persontoworklink1(self, body, linktype, **kwargs):  # noqa: E501
        """persontoworklink1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.persontoworklink1(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.persontoworklink1_with_http_info(body, linktype, **kwargs)  # noqa: E501
        else:
            (data) = self.persontoworklink1_with_http_info(body, linktype, **kwargs)  # noqa: E501
            return data

    def persontoworklink1_with_http_info(self, body, linktype, **kwargs):  # noqa: E501
        """persontoworklink1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.persontoworklink1_with_http_info(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'linktype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method persontoworklink1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `persontoworklink1`")  # noqa: E501
        # verify the required parameter 'linktype' is set
        if ('linktype' not in params or
                params['linktype'] is None):
            raise ValueError("Missing the required parameter `linktype` when calling `persontoworklink1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'linktype' in params:
            header_params['linktype'] = params['linktype']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/subjecttowork/addlink', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubjectResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def removepersontopersonlink(self, body, **kwargs):  # noqa: E501
        """removepersontopersonlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removepersontopersonlink(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.removepersontopersonlink_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.removepersontopersonlink_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def removepersontopersonlink_with_http_info(self, body, **kwargs):  # noqa: E501
        """removepersontopersonlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removepersontopersonlink_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method removepersontopersonlink" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `removepersontopersonlink`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/persontoperson/removelink', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def removepersontoworklink(self, body, **kwargs):  # noqa: E501
        """removepersontoworklink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removepersontoworklink(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.removepersontoworklink_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.removepersontoworklink_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def removepersontoworklink_with_http_info(self, body, **kwargs):  # noqa: E501
        """removepersontoworklink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removepersontoworklink_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: PersonResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method removepersontoworklink" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `removepersontoworklink`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/persontowork/removelink', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def removesubjecttopersonlink(self, body, **kwargs):  # noqa: E501
        """removesubjecttopersonlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removesubjecttopersonlink(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.removesubjecttopersonlink_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.removesubjecttopersonlink_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def removesubjecttopersonlink_with_http_info(self, body, **kwargs):  # noqa: E501
        """removesubjecttopersonlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removesubjecttopersonlink_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method removesubjecttopersonlink" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `removesubjecttopersonlink`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/subjecttowork/removelink', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubjectResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def removesubjecttosubjectlink(self, body, **kwargs):  # noqa: E501
        """removesubjecttosubjectlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removesubjecttosubjectlink(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.removesubjecttosubjectlink_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.removesubjecttosubjectlink_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def removesubjecttosubjectlink_with_http_info(self, body, **kwargs):  # noqa: E501
        """removesubjecttosubjectlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removesubjecttosubjectlink_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method removesubjecttosubjectlink" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `removesubjecttosubjectlink`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/subjecttosubject/removelink', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubjectResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def removeworktoworklink(self, body, **kwargs):  # noqa: E501
        """removeworktoworklink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removeworktoworklink(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: WorkResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.removeworktoworklink_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.removeworktoworklink_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def removeworktoworklink_with_http_info(self, body, **kwargs):  # noqa: E501
        """removeworktoworklink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removeworktoworklink_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :return: WorkResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method removeworktoworklink" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `removeworktoworklink`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/worktowork/removelink', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subjecttosubjectlink(self, body, linktype, **kwargs):  # noqa: E501
        """subjecttosubjectlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subjecttosubjectlink(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subjecttosubjectlink_with_http_info(body, linktype, **kwargs)  # noqa: E501
        else:
            (data) = self.subjecttosubjectlink_with_http_info(body, linktype, **kwargs)  # noqa: E501
            return data

    def subjecttosubjectlink_with_http_info(self, body, linktype, **kwargs):  # noqa: E501
        """subjecttosubjectlink  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subjecttosubjectlink_with_http_info(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: SubjectResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'linktype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subjecttosubjectlink" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `subjecttosubjectlink`")  # noqa: E501
        # verify the required parameter 'linktype' is set
        if ('linktype' not in params or
                params['linktype'] is None):
            raise ValueError("Missing the required parameter `linktype` when calling `subjecttosubjectlink`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'linktype' in params:
            header_params['linktype'] = params['linktype']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/subjecttosubject/addlink', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubjectResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subjecttosubjectlink1(self, body, linktype, **kwargs):  # noqa: E501
        """subjecttosubjectlink1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subjecttosubjectlink1(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: WorkResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subjecttosubjectlink1_with_http_info(body, linktype, **kwargs)  # noqa: E501
        else:
            (data) = self.subjecttosubjectlink1_with_http_info(body, linktype, **kwargs)  # noqa: E501
            return data

    def subjecttosubjectlink1_with_http_info(self, body, linktype, **kwargs):  # noqa: E501
        """subjecttosubjectlink1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subjecttosubjectlink1_with_http_info(body, linktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinkRequest body: (required)
        :param str linktype: (required)
        :return: WorkResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'linktype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subjecttosubjectlink1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `subjecttosubjectlink1`")  # noqa: E501
        # verify the required parameter 'linktype' is set
        if ('linktype' not in params or
                params['linktype'] is None):
            raise ValueError("Missing the required parameter `linktype` when calling `subjecttosubjectlink1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'linktype' in params:
            header_params['linktype'] = params['linktype']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapi auth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/linker/worktowork/addlink', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
