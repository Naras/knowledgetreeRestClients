# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PersonRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'birthdate': 'datetime',
        'deathdate': 'datetime',
        'alive': 'bool',
        'biography': 'str',
        'period': 'str',
        'affiliation': 'str',
        'address': 'Address'
    }

    attribute_map = {
        'name': 'name',
        'birthdate': 'birthdate',
        'deathdate': 'deathdate',
        'alive': 'alive',
        'biography': 'biography',
        'period': 'period',
        'affiliation': 'affiliation',
        'address': 'address'
    }

    def __init__(self, name=None, birthdate=None, deathdate=None, alive=None, biography=None, period=None, affiliation=None, address=None):  # noqa: E501
        """PersonRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._birthdate = None
        self._deathdate = None
        self._alive = None
        self._biography = None
        self._period = None
        self._affiliation = None
        self._address = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if birthdate is not None:
            self.birthdate = birthdate
        if deathdate is not None:
            self.deathdate = deathdate
        if alive is not None:
            self.alive = alive
        if biography is not None:
            self.biography = biography
        if period is not None:
            self.period = period
        if affiliation is not None:
            self.affiliation = affiliation
        if address is not None:
            self.address = address

    @property
    def name(self):
        """Gets the name of this PersonRequest.  # noqa: E501


        :return: The name of this PersonRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonRequest.


        :param name: The name of this PersonRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def birthdate(self):
        """Gets the birthdate of this PersonRequest.  # noqa: E501


        :return: The birthdate of this PersonRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this PersonRequest.


        :param birthdate: The birthdate of this PersonRequest.  # noqa: E501
        :type: datetime
        """

        self._birthdate = birthdate

    @property
    def deathdate(self):
        """Gets the deathdate of this PersonRequest.  # noqa: E501


        :return: The deathdate of this PersonRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._deathdate

    @deathdate.setter
    def deathdate(self, deathdate):
        """Sets the deathdate of this PersonRequest.


        :param deathdate: The deathdate of this PersonRequest.  # noqa: E501
        :type: datetime
        """

        self._deathdate = deathdate

    @property
    def alive(self):
        """Gets the alive of this PersonRequest.  # noqa: E501


        :return: The alive of this PersonRequest.  # noqa: E501
        :rtype: bool
        """
        return self._alive

    @alive.setter
    def alive(self, alive):
        """Sets the alive of this PersonRequest.


        :param alive: The alive of this PersonRequest.  # noqa: E501
        :type: bool
        """

        self._alive = alive

    @property
    def biography(self):
        """Gets the biography of this PersonRequest.  # noqa: E501


        :return: The biography of this PersonRequest.  # noqa: E501
        :rtype: str
        """
        return self._biography

    @biography.setter
    def biography(self, biography):
        """Sets the biography of this PersonRequest.


        :param biography: The biography of this PersonRequest.  # noqa: E501
        :type: str
        """

        self._biography = biography

    @property
    def period(self):
        """Gets the period of this PersonRequest.  # noqa: E501


        :return: The period of this PersonRequest.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this PersonRequest.


        :param period: The period of this PersonRequest.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def affiliation(self):
        """Gets the affiliation of this PersonRequest.  # noqa: E501


        :return: The affiliation of this PersonRequest.  # noqa: E501
        :rtype: str
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this PersonRequest.


        :param affiliation: The affiliation of this PersonRequest.  # noqa: E501
        :type: str
        """

        self._affiliation = affiliation

    @property
    def address(self):
        """Gets the address of this PersonRequest.  # noqa: E501


        :return: The address of this PersonRequest.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PersonRequest.


        :param address: The address of this PersonRequest.  # noqa: E501
        :type: Address
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
