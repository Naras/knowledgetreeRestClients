# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'persontype': 'str',
        'personworktype': 'str',
        'subjecttype': 'str',
        'worktype': 'str',
        'subjectworktype': 'str',
        'links': 'list[Link]'
    }

    attribute_map = {
        'id': 'id',
        'persontype': 'persontype',
        'personworktype': 'personworktype',
        'subjecttype': 'subjecttype',
        'worktype': 'worktype',
        'subjectworktype': 'subjectworktype',
        'links': 'links'
    }

    def __init__(self, id=None, persontype=None, personworktype=None, subjecttype=None, worktype=None, subjectworktype=None, links=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._persontype = None
        self._personworktype = None
        self._subjecttype = None
        self._worktype = None
        self._subjectworktype = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if persontype is not None:
            self.persontype = persontype
        if personworktype is not None:
            self.personworktype = personworktype
        if subjecttype is not None:
            self.subjecttype = subjecttype
        if worktype is not None:
            self.worktype = worktype
        if subjectworktype is not None:
            self.subjectworktype = subjectworktype
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this Link.  # noqa: E501


        :return: The id of this Link.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Link.


        :param id: The id of this Link.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def persontype(self):
        """Gets the persontype of this Link.  # noqa: E501


        :return: The persontype of this Link.  # noqa: E501
        :rtype: str
        """
        return self._persontype

    @persontype.setter
    def persontype(self, persontype):
        """Sets the persontype of this Link.


        :param persontype: The persontype of this Link.  # noqa: E501
        :type: str
        """
        allowed_values = ["GURUSHISHYA", "CONTEMPORARY"]  # noqa: E501
        if persontype not in allowed_values:
            raise ValueError(
                "Invalid value for `persontype` ({0}), must be one of {1}"  # noqa: E501
                .format(persontype, allowed_values)
            )

        self._persontype = persontype

    @property
    def personworktype(self):
        """Gets the personworktype of this Link.  # noqa: E501


        :return: The personworktype of this Link.  # noqa: E501
        :rtype: str
        """
        return self._personworktype

    @personworktype.setter
    def personworktype(self, personworktype):
        """Sets the personworktype of this Link.


        :param personworktype: The personworktype of this Link.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMMENTATOR", "CREATOR", "EDITOR", "PRAMAANA_PRAMATHA", "REVIEWER"]  # noqa: E501
        if personworktype not in allowed_values:
            raise ValueError(
                "Invalid value for `personworktype` ({0}), must be one of {1}"  # noqa: E501
                .format(personworktype, allowed_values)
            )

        self._personworktype = personworktype

    @property
    def subjecttype(self):
        """Gets the subjecttype of this Link.  # noqa: E501


        :return: The subjecttype of this Link.  # noqa: E501
        :rtype: str
        """
        return self._subjecttype

    @subjecttype.setter
    def subjecttype(self, subjecttype):
        """Sets the subjecttype of this Link.


        :param subjecttype: The subjecttype of this Link.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADHAARA_ADHAARI", "ANGA_ANGI", "ANONYA_ASHRAYA", "ASHRAYA_ASHREYI", "AVAYAVI", "DARSHANA", "DHARMA_DHARMI", "JANYA_JANAKA", "KAARYA_KAARANA", "NIRUPYA_NIRUPAKA", "ANGA", "PRAKAARA_PRAKAARI", "COMMON_PARENT", "UDDHESHYA_VIDHEYA", "UPAVEDA", "UPABRAHMYA_UPABRAHMANA", "UPANISHAD", "VISHAYA_VISHAYI"]  # noqa: E501
        if subjecttype not in allowed_values:
            raise ValueError(
                "Invalid value for `subjecttype` ({0}), must be one of {1}"  # noqa: E501
                .format(subjecttype, allowed_values)
            )

        self._subjecttype = subjecttype

    @property
    def worktype(self):
        """Gets the worktype of this Link.  # noqa: E501


        :return: The worktype of this Link.  # noqa: E501
        :rtype: str
        """
        return self._worktype

    @worktype.setter
    def worktype(self, worktype):
        """Sets the worktype of this Link.


        :param worktype: The worktype of this Link.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADHAARA_ADHAARI", "ANGA_ANGI", "ANONYA_ASHRAYA", "ASHRAYA_ASHREYI", "AVAYAVI", "CHAPTER", "COMMENTARY_ON_COMMENTARY", "COMMENTARY", "DARSHANA", "DERIVED", "DHARMA_DHARMI", "JANYA_JANAKA", "KAARYA_KAARANA", "NIRUPYA_NIRUPAKA", "ORIGINAL", "ANGA", "PART_WHOLE_RELATION", "PRAKAARA_PRAKAARI", "REVIEW", "SECTION", "COMMON_PARENT", "SUB_COMMENTARY", "SUB_SECTION", "UDDHESHYA_VIDHEYA", "UPAVEDA", "UPABRAHMYA_UPABRAHMANA", "UPANISHAD", "VISHAYA_VISHAYI", "VOLUME"]  # noqa: E501
        if worktype not in allowed_values:
            raise ValueError(
                "Invalid value for `worktype` ({0}), must be one of {1}"  # noqa: E501
                .format(worktype, allowed_values)
            )

        self._worktype = worktype

    @property
    def subjectworktype(self):
        """Gets the subjectworktype of this Link.  # noqa: E501


        :return: The subjectworktype of this Link.  # noqa: E501
        :rtype: str
        """
        return self._subjectworktype

    @subjectworktype.setter
    def subjectworktype(self, subjectworktype):
        """Sets the subjectworktype of this Link.


        :param subjectworktype: The subjectworktype of this Link.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMMENTARY_ON_COMMENTARY", "COMMENTARY", "COMPILATION", "ORIGINAL_WORK", "PRAMANA_PRAMEYA", "RECITATION", "SUB_COMMENTARY", "TRANSLATION", "TREATISE", "UPABRAHMYA_UPABRAHMANA", "VRITTHI"]  # noqa: E501
        if subjectworktype not in allowed_values:
            raise ValueError(
                "Invalid value for `subjectworktype` ({0}), must be one of {1}"  # noqa: E501
                .format(subjectworktype, allowed_values)
            )

        self._subjectworktype = subjectworktype

    @property
    def links(self):
        """Gets the links of this Link.  # noqa: E501


        :return: The links of this Link.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Link.


        :param links: The links of this Link.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
