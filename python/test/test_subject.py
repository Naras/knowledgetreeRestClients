# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import json, unittest, requests
import random

import swagger_client
# from models.subject import Subject  # noqa: E501
from swagger_client.rest import ApiException

prefix = 'http://api.iyengarlabs.org/v1/'
addToLeaf, addToRoot, nodelete = False, False, False

class TestSubject(unittest.TestCase):
    """Subject unit test stubs"""

    def setUp(self):
        pass
    def tearDown(self):
        pass
    def testSubject(self):
        """Test Subject"""
        # model = swagger_client.models.subject.Subject()  # noqa: E501
        response = requests.get(prefix + 'rootsubject')
        self.assertEqual(200, response.status_code)
        responseAsDict = json.loads(response.text)
        # print(responseAsDict)
        self.assertIn('subject', responseAsDict)
        self.assertIn('title', responseAsDict['subject'])
        self.assertEqual('OM', responseAsDict['subject']['title'])
        self.assertIn('description', responseAsDict['subject'])
        self.assertEqual('Origin of everything', responseAsDict['subject']['description'])
        # self.assertIn('subject_relations', responseAsDict['subject'])
        if 'subject_relations' in responseAsDict['subject']:
            subject_relations = responseAsDict['subject']['subject_relations']
            for entry in subject_relations:
                self.assertIn(entry['subjecttype'],
                              ['ADHAARA_ADHAARI', 'ANGA_ANGI', 'ANONYA_ASHRAYA', 'ASHRAYA_ASHREYI', 'AVAYAVI', 'DARSHANA', 'DHARMA_DHARMI', 'JANYA_JANAKA',
                               'KAARYA_KAARANA', 'NIRUPYA_NIRUPAKA', 'ANGA', 'PRAKAARA_PRAKAARI', 'COMMON_PARENT', 'UDDHESHYA_VIDHEYA', 'UPAVEDA',
                               'UPABRAHMYA_UPABRAHMANA', 'UPANISHAD', 'VISHAYA_VISHAYI'])
                newReqUrl = entry['_links']['self']['href']
                # print(newReqUrl)
                if str(newReqUrl).startswith('/v1'): newReqUrl = prefix + newReqUrl
                # print(newReqUrl)
                response = requests.get(newReqUrl)
                # self.assertEqual(200, response.status_code)
                if response.status_code == 200:
                    responseAsDict = json.loads(response.text)
                    # print(responseAsDict)
                    self.assertIn('title',responseAsDict['subject'])
                    self.assertIn('subject_parents',responseAsDict['subject'])
                    self.assertEqual('1001',responseAsDict['subject']['subject_parents'][0]['id'])
    def testAddModifyRemove(self):
        response = requests.post(prefix + 'subject/add',
                                 json={'title': 'name-test','description': 'description-test'},
                                 headers={'parentid': '1001',"relation":'JANYA_JANAKA'})
        self.assertIn(response.status_code, [200,201])
        # print(response.text)
        if response.status_code in [200,201]:
            responseAsDict = json.loads(response.text)
            # print(responseAsDict)
            self.assertIn('title',responseAsDict['subject'])
            self.assertEqual('name-test',responseAsDict['subject']['title'])
            self.assertIn('description',responseAsDict['subject'])
            self.assertEqual('description-test',responseAsDict['subject']['description'])
            created_id = responseAsDict['subject']['_id']
            response = requests.patch(prefix + 'subject/update/' + created_id ,
                                     json={'title': 'name-test-updated', 'description': 'description-test-updated'})
            # print('code %i text %s'%(response.status_code, response.text))
            self.assertIn(response.status_code, [200, 201])
            responseAsDict = json.loads(response.text)
            self.assertEqual('name-test-updated', responseAsDict['subject']['title'])
            self.assertEqual('description-test-updated',responseAsDict['subject']['description'])
            response = requests.delete(prefix + 'subject/remove/' + created_id + '?deletesubtree=false')
            self.assertIn(response.status_code, [200,201])
            self.assertEqual('"OK"', response.text)
    def testAddModifyRemoveChild(self):
        relations = ['ADHAARA_ADHAARI', 'ANGA_ANGI', 'ANONYA_ASHRAYA', 'ASHRAYA_ASHREYI', 'AVAYAVI', 'DARSHANA',
                     'DHARMA_DHARMI', 'JANYA_JANAKA', 'KAARYA_KAARANA', 'NIRUPYA_NIRUPAKA', 'ANGA', 'PRAKAARA_PRAKAARI', 'COMMON_PARENT',
                     'UDDHESHYA_VIDHEYA', 'UPAVEDA','UPABRAHMYA_UPABRAHMANA', 'UPANISHAD', 'VISHAYA_VISHAYI']
        response = requests.post(prefix + 'subject/add',
                                 json={'title': 'name-test','description': 'description-test'},
                                 headers={'parentid': '1001',"relation":random.choice(relations)})
        self.assertIn(response.status_code, [200, 201])
        responseAsDict = json.loads(response.text)
        created_id_parent = responseAsDict['subject']['_id']
        # print('Parent:', created_id_parent)
        response = requests.post(prefix + 'subject/add',
                                 json={'title': 'child-of-' + created_id_parent, 'description': 'description-child-of-' + created_id_parent},
                                 headers={'parentid': created_id_parent, "relation":random.choice(relations)})
        self.assertIn(response.status_code, [200, 201])
        responseAsDict = json.loads(response.text)
        created_id_child = responseAsDict['subject']['_id']
        # print('child:',responseAsDict)
        self.assertIn('title', responseAsDict['subject'])
        self.assertEqual('child-of-' + created_id_parent, responseAsDict['subject']['title'])
        self.assertIn('description', responseAsDict['subject'])
        self.assertEqual('description-child-of-' + created_id_parent, responseAsDict['subject']['description'])
        self.assertIn('id', responseAsDict['subject']['subject_parents'][0])
        self.assertEqual(created_id_parent, responseAsDict['subject']['subject_parents'][0]['id'])
        response = requests.get(prefix + 'subject/' + created_id_parent)
        self.assertIn(response.status_code, [200, 201])
        responseAsDict = json.loads(response.text)
        # print('node after:', responseAsDict)
        self.assertIn('subjecttype',responseAsDict['subject']['subject_relations'][0])
        self.assertIn(responseAsDict['subject']['subject_relations'][0]['subjecttype'], relations)
        self.assertIn('id',responseAsDict['subject']['subject_relations'][0])
        self.assertEqual(created_id_child, responseAsDict['subject']['subject_relations'][0]['id'])
        response = requests.delete(prefix + 'subject/remove/' + created_id_parent + '?deletesubtree=true')
        self.assertIn(response.status_code, [200, 201])
        self.assertEqual('"OK"', response.text)
    def testNavigate(self):
        response = requests.get(prefix + 'rootsubject')
        self.assertEqual(200, response.status_code)
        responseAsDict = json.loads(response.text)
        # print(responseAsDict)
        self.assertIn('subject', responseAsDict)
        self.assertIn('title', responseAsDict['subject'])
        self.assertEqual('OM', responseAsDict['subject']['title'])
        self.assertIn('description', responseAsDict['subject'])
        self.assertEqual('Origin of everything', responseAsDict['subject']['description'])
        # self.assertIn('subject_relations', responseAsDict['subject'])
        if 'subject_relations' in responseAsDict['subject']:
            subject_relations = responseAsDict['subject']['subject_relations']
            getChildren(self, subject_relations)
        if addToRoot: addChild(self, responseAsDict['subject'])  # each run adds a node to root
    def testSubjectRemoveallButRoot(self):
        """Test Subject"""
        # model = swagger_client.models.subject.Subject()  # noqa: E501
        response = requests.get(prefix + 'rootsubject')
        self.assertEqual(200, response.status_code)
        responseAsDict = json.loads(response.text)
        # print(responseAsDict)
        self.assertIn('subject', responseAsDict)
        self.assertIn('title', responseAsDict['subject'])
        self.assertEqual('OM', responseAsDict['subject']['title'])
        self.assertIn('description', responseAsDict['subject'])
        self.assertEqual('Origin of everything', responseAsDict['subject']['description'])
        # self.assertIn('subject_relations', responseAsDict['subject'])
        if 'subject_relations' in responseAsDict['subject']:
            subject_relations = responseAsDict['subject']['subject_relations']
            for entry in subject_relations:
                if nodelete: print('from root -  child will be deleted %s'%entry['id'])
                else:
                    print('from root -  child is deleted %s'%entry['id'])
                    response = requests.delete(prefix + 'subject/remove/' + entry['id'] + '?deletesubtree=true')
                    self.assertIn(response.status_code, [200, 201])
                    self.assertEqual('"OK"', response.text)

def getChildren(self, subject_relations):
    for entry in subject_relations:
        # print(entry)
        self.assertIn(entry['subjecttype'],
                      ['ADHAARA_ADHAARI', 'ANGA_ANGI', 'ANONYA_ASHRAYA', 'ASHRAYA_ASHREYI', 'AVAYAVI', 'DARSHANA',
                       'DHARMA_DHARMI', 'JANYA_JANAKA', 'KAARYA_KAARANA', 'NIRUPYA_NIRUPAKA', 'ANGA', 'PRAKAARA_PRAKAARI', 'COMMON_PARENT',
                       'UDDHESHYA_VIDHEYA', 'UPAVEDA', 'UPABRAHMYA_UPABRAHMANA', 'UPANISHAD', 'VISHAYA_VISHAYI'])
        Request_Url_child = entry['_links']['self']['href']
        if str(Request_Url_child).startswith('/v1'): Request_Url_child = prefix + Request_Url_child
        response = requests.get(Request_Url_child)
        # self.assertEqual(200, response.status_code)
        if response.status_code == 200:
            responseAsDict = json.loads(response.text)
            # for k,v in responseAsDict['subject'].items(): print('k:%s v:%s'%(k,v))
            node = responseAsDict['subject']['_id']
            if 'subject_relations' in responseAsDict['subject']:
                # has child nodes/subtree
                print('non-leaf node id:%s title:%s parent:%s description:%s relation:%s id:%s' %
                  (responseAsDict['subject']['_id'], responseAsDict['subject']['title'],
                   responseAsDict['subject']['subject_parents'][0]['id'], responseAsDict['subject']['description'],
                   responseAsDict['subject']['subject_relations'][0]['subjecttype'],
                   responseAsDict['subject']['subject_relations'][0]['id']))
                # print(responseAsDict['subject']['subject_relations'][0])
                getChildren(self, responseAsDict['subject']['subject_relations'])
                # print('node:%s subject:%s' % (node, responseAsDict['subject']['subject_relations'][0]))
            else:
                # leaf node
                print('leaf node id:%s title:%s parent:%s description:%s' %
                  (responseAsDict['subject']['_id'], responseAsDict['subject']['title'],
                   responseAsDict['subject']['subject_parents'][0]['id'], responseAsDict['subject']['description']))
                # print('leaf node:%s parent:%s' % (node, responseAsDict['subject']['subject_parents'][0]['id']))
                if addToLeaf: addChild(self, responseAsDict['subject'])  # add a child to each leaf

            self.assertIn('title', responseAsDict['subject'])
            self.assertIn('subject_parents', responseAsDict['subject'])
def addChild(self, node):
    relations = ['ADHAARA_ADHAARI', 'ANGA_ANGI', 'ANONYA_ASHRAYA', 'ASHRAYA_ASHREYI', 'AVAYAVI', 'DARSHANA', 'DHARMA_DHARMI', 'JANYA_JANAKA',
                           'KAARYA_KAARANA', 'NIRUPYA_NIRUPAKA', 'ANGA', 'PRAKAARA_PRAKAARI', 'COMMON_PARENT', 'UDDHESHYA_VIDHEYA', 'UPAVEDA',
                           'UPABRAHMYA_UPABRAHMANA', 'UPANISHAD', 'VISHAYA_VISHAYI']
    rel = random.choice(relations)
    response = requests.post(prefix + 'subject/add',
                             json={'title': 'child-' + node['title'], 'description': 'child-' + node['description']},
                             headers={'parentid': node['_id'], "relation": rel})
    self.assertIn(response.status_code, [200, 201])
    responseAsDict = json.loads(response.text)
    created_id_child = responseAsDict['subject']['_id']
    print('child:',responseAsDict)
    self.assertIn('title', responseAsDict['subject'])
    self.assertEqual('child-' + node['title'], responseAsDict['subject']['title'])
    self.assertIn('description', responseAsDict['subject'])
    self.assertEqual('child-' + node['description'], responseAsDict['subject']['description'])
    self.assertIn('id', responseAsDict['subject']['subject_parents'][0])
    self.assertEqual(node['_id'], responseAsDict['subject']['subject_parents'][0]['id'])
    response = requests.get(prefix + 'subject/' + node['_id'])
    self.assertIn(response.status_code, [200, 201])
    responseAsDict = json.loads(response.text)
    print('node after:', responseAsDict)
    # self.assertIn('subjecttype', responseAsDict['subject']['subject_relations'][0])
    # self.assertIn(responseAsDict['subject']['subject_relations'][0]['subjecttype'], relations)
    # self.assertIn('id', responseAsDict['subject']['subject_relations'][0])
    # self.assertEqual(created_id_child, responseAsDict['subject']['subject_relations'][0]['id'])
    # response = requests.delete(prefix + 'subject/remove/' + node['_id'] + '?deletesubtree=true')
    # self.assertIn(response.status_code, [200, 201])
    # self.assertEqual('"OK"', response.text)

if __name__ == '__main__':
    unittest.main()
